#!/usr/bin/env bash

set -e
set -o pipefail

CHURNER=${1:?first parameter is the name of this churner. Used to name queues}
QUEUES=${2:-"10"}
TIMES=${3:-"1"}
MIN_DURATION=${4:-"5"}
MAX_DURATION=${5:-"10"}

. setup

delete_queues() {
  QUEUE_PREFIX=${1:?first parameter is the queue prefix name}
  QUEUES=${2:?first parameter is the number of queues}

  URI="$(./_uri http $HOSTNAMES | tr ',' "\n"|shuf|head -n 1)"

  for Q in $(seq 1 $QUEUES); do
    QUEUE="$(printf $QUEUE_PREFIX $Q)"
    echo "Deleting queue $QUEUE"
    curl -X DELETE $URI/api/queues/%2f/$QUEUE
  done
}

queue_churner() {

  QUEUE_PREFIX=${1:?first parameter is the queue prefix name}
  QUEUES=${2:?first parameter is the number of queues}
  DURATION=${3:?third parameter is the duration of this queue churner}

	# PerfTest is not able yet to handle the situation when it fails to establish the first
	# connection. With this while-loop we randomly choose one node from the list of nodes
	# until it successfully connects
	while : ; do
	    URI="$(./_uri amqp $HOSTNAMES | tr ',' "\n"|shuf|head -n 1)"
	    echo "Perftest with uri $URI and duration $DURATION"

	    time perftest   \
	--autoack \
  --flag persistent \
  --auto-delete false \
	--size 100 \
	--routing-key perf-test \
	--uris $URI \
	--queue-pattern $QUEUE_PREFIX \
	--queue-pattern-from 1 \
	--queue-pattern-to ${QUEUES:?must be set} \
	--consumers ${QUEUES:?must be set} \
	--producers ${QUEUES:?must be set} \
	--time ${DURATION}  1>/dev/null

	   if [ $? -ne 0 ]; then
       echo "Unable to connect to $URI. Trying in 1 second"
  	   sleep 1
     else
        delete_queues $1 $2
        break
     fi
	done
}

printf "%s\n" "" \
	"## Queue Churner $CHURNER against $HOSTNAMES " \

for i in $(seq 1 $TIMES); do
  printf "Launching Queue Churner #%s-%s " $CHURNER $i
	DURATION=$(( $RANDOM % $MAX_DURATION + $MIN_DURATION));
  queue_churner "$CHURNER-%d" $QUEUES $DURATION
done
